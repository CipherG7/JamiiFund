"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cssesc";
exports.ids = ["vendor-chunks/cssesc"];
exports.modules = {

/***/ "(ssr)/./node_modules/cssesc/cssesc.js":
/*!***************************************!*\
  !*** ./node_modules/cssesc/cssesc.js ***!
  \***************************************/
/***/ ((module) => {

eval("/*! https://mths.be/cssesc v3.0.0 by @mathias */ \nvar object = {};\nvar hasOwnProperty = object.hasOwnProperty;\nvar merge = function merge(options, defaults) {\n    if (!options) {\n        return defaults;\n    }\n    var result = {};\n    for(var key in defaults){\n        // `if (defaults.hasOwnProperty(key) { … }` is not needed here, since\n        // only recognized option names are used.\n        result[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];\n    }\n    return result;\n};\nvar regexAnySingleEscape = /[ -,\\.\\/:-@\\[-\\^`\\{-~]/;\nvar regexSingleEscape = /[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/;\nvar regexAlwaysEscape = /['\"\\\\]/;\nvar regexExcessiveSpaces = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g;\n// https://mathiasbynens.be/notes/css-escapes#css\nvar cssesc = function cssesc(string, options) {\n    options = merge(options, cssesc.options);\n    if (options.quotes != \"single\" && options.quotes != \"double\") {\n        options.quotes = \"single\";\n    }\n    var quote = options.quotes == \"double\" ? '\"' : \"'\";\n    var isIdentifier = options.isIdentifier;\n    var firstChar = string.charAt(0);\n    var output = \"\";\n    var counter = 0;\n    var length = string.length;\n    while(counter < length){\n        var character = string.charAt(counter++);\n        var codePoint = character.charCodeAt();\n        var value = void 0;\n        // If it’s not a printable ASCII character…\n        if (codePoint < 0x20 || codePoint > 0x7E) {\n            if (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {\n                // It’s a high surrogate, and there is a next character.\n                var extra = string.charCodeAt(counter++);\n                if ((extra & 0xFC00) == 0xDC00) {\n                    // next character is low surrogate\n                    codePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;\n                } else {\n                    // It’s an unmatched surrogate; only append this code unit, in case\n                    // the next code unit is the high surrogate of a surrogate pair.\n                    counter--;\n                }\n            }\n            value = \"\\\\\" + codePoint.toString(16).toUpperCase() + \" \";\n        } else {\n            if (options.escapeEverything) {\n                if (regexAnySingleEscape.test(character)) {\n                    value = \"\\\\\" + character;\n                } else {\n                    value = \"\\\\\" + codePoint.toString(16).toUpperCase() + \" \";\n                }\n            } else if (/[\\t\\n\\f\\r\\x0B]/.test(character)) {\n                value = \"\\\\\" + codePoint.toString(16).toUpperCase() + \" \";\n            } else if (character == \"\\\\\" || !isIdentifier && (character == '\"' && quote == character || character == \"'\" && quote == character) || isIdentifier && regexSingleEscape.test(character)) {\n                value = \"\\\\\" + character;\n            } else {\n                value = character;\n            }\n        }\n        output += value;\n    }\n    if (isIdentifier) {\n        if (/^-[-\\d]/.test(output)) {\n            output = \"\\\\-\" + output.slice(1);\n        } else if (/\\d/.test(firstChar)) {\n            output = \"\\\\3\" + firstChar + \" \" + output.slice(1);\n        }\n    }\n    // Remove spaces after `\\HEX` escapes that are not followed by a hex digit,\n    // since they’re redundant. Note that this is only possible if the escape\n    // sequence isn’t preceded by an odd number of backslashes.\n    output = output.replace(regexExcessiveSpaces, function($0, $1, $2) {\n        if ($1 && $1.length % 2) {\n            // It’s not safe to remove the space, so don’t.\n            return $0;\n        }\n        // Strip the space.\n        return ($1 || \"\") + $2;\n    });\n    if (!isIdentifier && options.wrap) {\n        return quote + output + quote;\n    }\n    return output;\n};\n// Expose default options (so they can be overridden globally).\ncssesc.options = {\n    \"escapeEverything\": false,\n    \"isIdentifier\": false,\n    \"quotes\": \"single\",\n    \"wrap\": false\n};\ncssesc.version = \"3.0.0\";\nmodule.exports = cssesc;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/cssesc/cssesc.js\n");

/***/ })

};
;